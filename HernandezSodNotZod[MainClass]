//AUTHOR:DavidHernandez
//COURSE:CPT187
//PURPOSE:The Main Class presents the menus in which it can be interacted with and show end total
//CREATEDATE:April 20, 2021
package edu.cpt187.hernandez.exercise6;

import java.util.Scanner;

//Beginning of MainClass
public class MainClass 
{
	
	//Constants
	public  static final char[] MENU_CHARS = {'A', 'B', 'Q'};
	
	public static final String[] MENU_OPTIONS = {"Login", "Create an Account", "Quit"};
	
	public static final char[] FILE_MENU_CHARS = {'A', 'B', 'R'};
	
	public static final String[] FILE_MENU_OPTIONS = {"Load Inventory", "Create Order", "Return to Main Menu"};
	
	public static final char[] SUB_MENU_CHARS = {'A', 'B', 'C', 'D'};
	
	public static final String INVENTORY_FILE_NAME = "MasterOrderFile.dat";
	
	public static final String ACCOUNTS_FILE_NAME = "MasterUserFile.dat";
	
	//End of Constants
	
	public static void main(String[] args) 
	{
		String userName = "";
		
		char menuSelection = ' ';
		
		Inventory currentInventory = new Inventory();
		
		Order currentOrder = new Order();
		
		WriteOrder orders = new WriteOrder(INVENTORY_FILE_NAME);
		
		UserAccounts currentUser = new UserAccounts(ACCOUNTS_FILE_NAME);
		
		Scanner input=new Scanner(System.in);
		
		displayWelcomeBanner();
		
		menuSelection = validateMenuSelection(input);
		
		//Beginning of while is not Q
		while (menuSelection != 'Q')
		{
			currentUser.setUserAccountArrays();
			
			userName = getUserName(input);
			
			//Test if menuSelection is not A
			if (menuSelection != 'A')
			{
				currentUser.setSearchIndex(userName);
				
				//Test if getSearchIndex >= 0
				if (currentUser.getSearchedIndex() >= 0)
				{
					displayAccountResults(userName);
				}//End of Test if getSearchIndex >= 0
				
				//Else for Test if getSearchIndex >= 0
				else
				{
					currentUser.setWriteOneRecord(userName, getPassword(input));
					
					displayAccountResults();
				}//End of Else for Test if getSearchIndex >= 0
				
				currentUser.setSearchedIndex(userName, getPassword(input));
				
				//Test if getSearchedIndex is < 0
				if (currentUser.getSearchedIndex() < 0)
				{
					displayLoginError();
				}//End of Test if getSearchedIndex is < 0
				
				//Else for Test if getSearchedIndex is < 0
				else
				{
					menuSelection = validateFileSelection(input);
					
					//While menuSelection is not R
					while (menuSelection != 'R')
					{
						//Test if menuSelection is A
						if (menuSelection == 'A')
						{
							currentInventory.setLoadItems(getFileName(input));
							
							//Test if getRecordCount is <= 0
							if (currentInventory.getRecordCount() <= 0)
							{
								displayFileError();
							}//End of Test if getRecordCount is <= 0
							
							//Else for Test if getRecordCount is <= 0
							else
							{
								displayRecordReport(currentInventory.getRecordCount());
							}//End of Else for Test if getRecordCount is <= 0
							
						}//End of Test if menuSelection is A
						
						currentInventory.setSearchIndex(validateSearchValue(input));
						
						//Test if getItemSearchIndex is < 0
						if (currentInventory.getItemSearchedIndex() < 0)
						{
							displayNotFound();
						}//End of Test if getItemSearchIndex is < 0
						
						//Else for Test if getItemSearchIndex is < 0
						else
						{
							currentOrder.setLastItemSelectedIndex(currentInventory.getItemSearchedIndex());
							
							currentOrder.setItemID(currentInventory.getItemIDs());
							
							currentOrder.setItemPrice(currentInventory.getItemPrices());
							
							currentOrder.setItemName(currentInventory.getItemNames());
							
							currentOrder.setHowMany(validateHowMany(input));
							
							//Test if getInStockCounts is < getHowMany
							if (currentOrder.getInStockCount(currentInventory.getInStockCounts()) < currentOrder.getHowMany())
							{
								displayOutOfStock();
							}//End of Test if getInStockCounts is < getHowMany
							
							//Else for Test if getInStockCounts is < getHowMany
							else
							{
								currentOrder.setDiscountType(validateDiscountMenu(input, currentInventory.getDiscountNames(), currentInventory.getDiscountRates()));
								
								currentOrder.setDiscountName(currentInventory.getDiscountNames());
								
								currentOrder.setDiscountRate(currentInventory.getDiscountRates());
								
								currentOrder.setDecreaseInStock(currentInventory);
								
								currentOrder.setPrizeName(currentInventory.getPrizeNames(), currentInventory.getRandomNumber());
								
								orders.setWriteOrder(currentOrder.getItemID(), currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getTotalCost());
								
								//Test if getDiscountRate is > 0.0
								if (currentOrder.getDiscountRate() > 0.0)
								{
									displayOrderReport(userName, currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getDiscountName(), currentOrder.getDiscountRate(), currentOrder.getDiscountAmt(), currentOrder.getDiscountPrice(), currentOrder.getSubTotal(), currentOrder.getTaxRate(), currentOrder.getTaxAmt(), currentOrder.getTotalCost(), currentOrder.getPrizeName(), currentOrder.getInStockCount(currentInventory.getInStockCounts()));
								}//End of Test if getDiscountRate is > 0.0
								
								//Else for Test if getDiscountRate is > 0.0
								else
								{
									displayOrderReport(userName, currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getSubTotal(), currentOrder.getTaxRate(), currentOrder.getTaxAmt(), currentOrder.getTotalCost(), currentOrder.getPrizeName(), currentOrder.getInStockCount(currentInventory.getInStockCounts()));
								}//End of Else for Test if getDiscountRate is > 0.0
								
								menuSelection = validateFileSelection(input);
								
							}//End of Else for Test if getInStockCounts is < getHowMany
						}//End of Else for Test if getItemSearchIndex is < 0
						
					}//End of While menuSelection is not R
				}//End of Else for Test if getSearchedIndex is < 0
				
				menuSelection = validateMenuSelection(input);
				
			}//End of Test if menuSelection is not A	
		}//End of while is not Q
		
		currentInventory.setLoadItems(orders.getFileName(), orders.getRecordCount());
		
		//Test if getRecordCount is > 0
		if(orders.getRecordCount() > 0)
		{
			displayFinalReport(currentInventory.getItemIDs(), currentInventory.getItemNames(), currentInventory.getItemPrices(), currentInventory.getOrderQuantities(), currentInventory.getOrderTotals(), currentInventory.getRecordCount(), currentInventory.getGrandTotal());
		}//End of Test if getRecordCount is > 0
		
		displayFarewellMessage();
		
		//Close Scanner
		input.close();
	}
	
	//Beginning of Methods
	
	//Beginning of Void Methods
	
	//Display Welcome Banner Method
	public static void displayWelcomeBanner()
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("Welcome to the Account Manager Program, in this program");
		System.out.println("account info can be entered to access your account and");
		System.out.println("continue to make a purchase with your receipts being");
		System.out.println("printed at the end that displays the item being purchased");
		System.out.println("and a total being presented at the end.");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//End of Display Welcome Banner Method

	//Display Account Results Method
	public static void displayAccountResults()
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("ACCOUNT RESULTS");
		System.out.println("New Account created");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//End of Display Account Results Method
	
	//Display Account Results Method
	public static void displayAccountResults(String borrowedUserName)
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("ACCOUNT RESULTS");
		System.out.printf("%1s%1s%1s\n", "Account not created: username, ", borrowedUserName, ", already exists");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//End of Display Account Results Method
	
	//Display Login Error Method
	public static void displayLoginError()
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("LOGIN ERROR");
		System.out.println("Username and/or Password is incorrect");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//End of Display Login Error Method
	
	//Display Not Open Method
	public static void displayFileError()
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("FILE ERROR");
		System.out.println("The file named was not found or could not be opened");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//End of Display Not Open Method
		
	//Display Not Found Method
	public static void displayNotFound()
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("NOT FOUND ERROR");
		System.out.println("The search value entered was not found");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//End of Display Not found Method
		
	//Display Out Of Stock Method
	public static void displayOutOfStock()
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("OUT OF STOCK ERROR");
		System.out.println("The quantity entered is greater than the quantity in-stock");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//End of Display Out Of Stock Method
		
	//Display Record Report Method
	public static void displayRecordReport(int borrowedRecordCount)
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("RECORD REPORT");
		System.out.printf("%-1d%8s%10s\n", borrowedRecordCount, "records", "processed");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//End of Display Record Report Method
		
	//Display Main Menu Method
	public static void displayMainMenu()
	{
		int localIndex = 0;
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("MAIN MENU");
					
		//Beginning of localIndex repetition loop
		while (localIndex < MENU_CHARS.length)
		{
			System.out.printf("%-1s%4s%1s%1s\n", MENU_CHARS[localIndex], "for", "", MENU_OPTIONS[localIndex]);
			localIndex++;
		}//End of While localIndex repetition loop
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter your selection here: ");
	}//End of Display Main Menu Method
		
	//Display Discount Menu Method
	public static void displayDiscountMenu(String[] borrowedDiscountNames, double[] borrowedDiscountRates)
	{
		int localIndex = 0;
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("DISCOUNT MENU");
				
		while (localIndex  < SUB_MENU_CHARS.length )
		{
			System.out.printf("%-1s%1s%1s%1s%1s%9s%1.1f%2s\n", SUB_MENU_CHARS[localIndex], "", "for", "", borrowedDiscountNames[localIndex], "", borrowedDiscountRates[localIndex]  * 100, "%");
					
			localIndex++;
		}
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter your selection here: ");
	}//End of Display Discount Menu Method
		
	//Display Discount Menu Method
	public static void displayFileMenu()
	{
		int localIndex = 0;
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("FILE MENU");
				
		while (localIndex  < FILE_MENU_CHARS.length )
		{
			System.out.printf("%-1s%4s%1s%1s\n", FILE_MENU_CHARS[localIndex], "for", "", FILE_MENU_OPTIONS[localIndex]);
					
			localIndex++;
		}
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter your selection here: ");
	}//End of Display Discount Menu Method
	
	//Display Order Report Method
	public static void displayOrderReport(String borrowedUserName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, String borrowedDiscountName, double borrowedDiscountRate, double borrowedDiscountAmt, double borrowedDiscountPrice,  double borrowedSubTotal, double borrowedTaxRate, double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCount)
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("ORDER REPORT");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.printf("%-1s%14s\n", "Customer Name:", borrowedUserName);
		System.out.println();
		System.out.printf("%-1s%15s%1s\n", "Item Name:", "", borrowedItemName);
		System.out.printf("%-1s%15s%8.2f\n","Item Price:", "$", borrowedItemPrice);
		System.out.println();
		System.out.printf("%-1s%11s%1s\n", "Discount Name:", borrowedDiscountName);
		System.out.printf("%-1s%19.1f%2s\n", "Discount Rate:", borrowedDiscountRate, "%");
		System.out.printf("%-1s%10s%8.2f\n", "Discount Amount:", "$", borrowedDiscountAmt);
		System.out.printf("%-1s%11s%8.2f\n", "Discount Price:", "$", borrowedDiscountPrice);
		System.out.println();
		System.out.printf("%-1s%25d\n", "Quantity:", borrowedHowMany);
		System.out.println();
		System.out.printf("%-1s%17s%8.2f\n", "SubTotal:", "$", borrowedSubTotal);
		System.out.printf("%-1s%24.1f%2s\n", "Tax Rate:", borrowedTaxRate, "%");
		System.out.printf("%-1s%15s%8.2f\n", "Tax Amount:", "$", borrowedTaxAmt);
		System.out.println();
		System.out.printf("%-1s%14s%8.2f\n", "Order Total:", "$", borrowedTotalCost);
		System.out.println();
		System.out.printf("%-1s%23s\n", "Prize:", borrowedPrizeName);
		System.out.println();
		System.out.printf("%-1s%3d%6s%1s%15s\n", "Buy more now: Only", borrowedInStockCount, borrowedItemName, "s", "Left in-stock!");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//End of Display Order Report Method
		
	//Display Order Report Method
	public static void displayOrderReport(String borrowedUserName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany,double borrowedSubTotal, double borrowedTaxRate, double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCount)
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("ORDER REPORT");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.printf("%-1s%14s\n", "Customer Name:", borrowedUserName);
		System.out.println();
		System.out.printf("%-1s%15s%1s\n", "Item Name:", "", borrowedItemName);
		System.out.printf("%-1s%15s%8.2f\n","Item Price:", "$", borrowedItemPrice);
		System.out.println();
		System.out.printf("%-1s%25d\n", "Quantity:", borrowedHowMany);
		System.out.println();
		System.out.printf("%-1s%17s%8.2f\n", "SubTotal:", "$", borrowedSubTotal);
		System.out.printf("%-1s%24.1f%2s\n", "Tax Rate:", borrowedTaxRate, "%");
		System.out.printf("%-1s%15s%8.2f\n", "Tax Amount:", "$", borrowedTaxAmt);
		System.out.println();
		System.out.printf("%-1s%14s%8.2f\n", "Order Total:", "$", borrowedTotalCost);
		System.out.println();
		System.out.printf("%-1s%23s\n", "Prize:", borrowedPrizeName);
		System.out.println();
		System.out.printf("%-1s%3d%6s%1s%15s\n", "Buy more now: Only", borrowedInStockCount, borrowedItemName, "s", "Left in-stock!");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//End of Display Order Report Method
		
	//Display Final Report Method
	public static void displayFinalReport(int[] borrowedItemIDs, String[] borrowedItemNames, double[] borrowedItemPrices, int[] borrowedOrderQuantities, double[] borrowedOrderTotals, int recordCount, double borrowedGrandTotal)
	{
		int localIndex = 0;
		
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("FINAL REPORT");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		
		System.out.printf("%-1s%13s%13s%13s%13s\n", "ID", "Name", "Price", "QTY", "Total");
		
		//While localIndex is < borrowedItemNames.length
		while (localIndex < borrowedItemNames.length)
		{
			System.out.printf("%-1d%14s%9s%7.2f%10d%9s%7.2f\n", borrowedItemIDs, borrowedItemNames, "$", borrowedItemPrices, borrowedOrderQuantities, "$", borrowedOrderTotals);
		}//End of While localIndex is < borrowedItemNames.length
		
		System.out.println("GRAND TOTAL");
		System.out.printf("%-1s%8.2f\n", "$", borrowedGrandTotal);
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//End of Display Final Report Method
		
	//Display Farewell Message Void Method
	public static void displayFarewellMessage()
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("Thank you for using the Account Manager Program.");
		System.out.println("HAVE A WONDERFUL DAY!");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//End of Farewell Message Void Method
	
	//End of Void Methods
	
	//Beginning of VR Methods
	
	//Get User Name Method
	public static String getUserName(Scanner borrowedInput)
	{
		String localUserName = "";
		System.out.print("Please Enter your User Name: ");
		localUserName = borrowedInput.next();
		return localUserName;
	}//End of Get User Name Method
		
	//Get File Name Method
	public static String getFileName(Scanner borrowedInput)
	{
		String localFileName = "";
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter the file name with extension(i.e. file.txt): ");
		localFileName = borrowedInput.next();
		return localFileName;
	}//End of Get File Name Method
		
	//Get Password Method
	public static String getPassword(Scanner borrowedInput)
	{
		String localPassword = "";
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter your password: ");
		localPassword = borrowedInput.next();
		return localPassword;
	}//End of Get Password Method
	
	//Validate Main Menu Method 
	public static char validateMenuSelection(Scanner borrowedInput)
	{
		char localSelection = ' ';
					
		displayMainMenu();
				
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
					
		//Validate Main Menu Method with Repetition Loop and Error Message
		if (localSelection != 'A' && localSelection != 'B' && localSelection != 'Q')
		{
			System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			System.out.println("The selection made is invalid. Please try again.");
			System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
						
			displayMainMenu();
						
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//End of Validate Main Menu with Repetition Loop and Error Message
		return localSelection;
	}//End of Validate Main Menu
		
	//Validate Search Value Method
	public static int validateSearchValue(Scanner borrowedInput)
	{
		int localNumber = 0;
			
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter the search value");
		localNumber = borrowedInput.nextInt();
			
		//While localNumber <= -1
		while (localNumber <= -1)
		{
			System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			System.out.println("The value entered is invalid. Please try again.");
			System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			System.out.print("Enter the search value");
			localNumber = borrowedInput.nextInt();
		}//End of While localNumber <= -1
		return localNumber;
	}//End of Validate Search Value Method
		
	//Validate How Many Method
	public static String validateHowMany(Scanner borrowedInput)
	{
		int localHowMany = 0;
		System.out.print("Enter number of items: ");
		localHowMany=borrowedInput.nextInt();
		while (localHowMany <= 0)
		{//Validate How Many Repetition loop With Error Message Method
			System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			System.out.println("The value entered is invalid. Please try again.");
			System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			System.out.print("Enter number of items: ");
			localHowMany=borrowedInput.nextInt();
		}//End of Validation How Many Repetition Loop with Error Message Method
		return String.valueOf(localHowMany);
	}//End of Validate How Many Method
		
	//Validate Discount Menu Method
	public static char validateDiscountMenu(Scanner borrowedInput, String[] borrowedDiscountNames, double[] borrowedDiscountRates)
	{
		char localSelection = 0;
				
		displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
					
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
					
		//Validate Discount Menu with Repetition Loop and Error Message
		if (localSelection != 'A' && localSelection != 'B' && localSelection != 'C')
		{
			System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			System.out.println("The selection made is invalid. Please try again.");
			System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
						
			displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
						
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//End of Validate Discount Menu with Repetition Loop and Error Message
		return localSelection;
	}//End of Validate Discount Menu Method
	
	//Validate Discount Menu Method
	public static char validateFileSelection(Scanner borrowedInput)
	{
		char localSelection = 0;
				
		displayFileMenu();
					
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
					
		//Validate Discount Menu with Repetition Loop and Error Message
		if (localSelection != 'A' && localSelection != 'B' && localSelection != 'C')
		{
			System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			System.out.println("The selection made is invalid. Please try again.");
			System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
						
			displayFileMenu();
						
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//End of Validate Discount Menu with Repetition Loop and Error Message
		return localSelection;
	}//End of Validate Discount Menu Method
	
	//End of VR Methods
	
	//End of All Methods
}//End of Main Class
